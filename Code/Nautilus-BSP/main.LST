C51 COMPILER V9.51   MAIN                                                                  09/17/2025 16:47:21 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE main.c BROWSE INCDIR(.\inc) DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "STC15F2K60S2.H" //±?????
   2          #include "sys.H"      //±?????
   3          #include "displayer.H"
   4          #include "beep.H"
   5          #include "music.H"
   6          #include "key.H"
   7          #include "stepmotor.H"
   8          #include "vib.H"
   9          #include "hall.H"
  10          #include "adc.H"
  11          #include "uart1.h"
  12          #include "uart2.h"
  13          #include "IR.h"
  14          #include "DS1302.h"
  15          #include "M24C02.h"
  16          #include "FM_Radio.h"
  17          #include "EXT.h"
  18          #include "stepmotor.h"
  19          
  20          code unsigned long SysClock = 11059200; // ±??????¨???????¤×÷?±??????(Hz)?????§±????????????????¤
             -×÷?????¨?????±????????????
  21          #ifdef _displayer_H_          // ???????é?????±±??????¨??????????????±í????‘?????????????????
  22          code char decode_table[] = {
  23            // 数字 0-9
  24            0x3F, // 0: 00111111 (a,b,c,d,e,f亮)
  25            0x06, // 1: 00000110 (b,c亮)
  26            0x5B, // 2: 01011011 (a,b,g,e,d亮)
  27            0x4F, // 3: 01001111 (a,b,g,c,d亮)
  28            0x66, // 4: 01100110 (f,g,b,c亮)
  29            0x6D, // 5: 01101101 (a,f,g,c,d亮)
  30            0x7D, // 6: 01111101 (a,f,g,c,d,e亮)
  31            0x07, // 7: 00000111 (a,b,c亮)
  32            0x7F, // 8: 01111111 (全亮)
  33            0x6F, // 9: 01101111 (a,b,c,d,f,g亮)
  34          
  35            // 大写字母 A-Z（常用可显示的字母）
  36            0x77, // A (10): 01110111 (a,b,c,f,g亮)
  37            0x7C, // B (11): 01111100 (f,g,c,d,e亮，类似8少a)
  38            0x39, // C (12): 00111001 (a,f,e,d亮)
  39            0x5E, // D (13): 01011110 (b,c,d,e,g亮)
  40            0x79, // E (14): 01111001 (a,f,e,d,g亮)
  41            0x71, // F (15): 01110001 (a,f,e,g亮)
  42            0x3D, // G (16): 00111101 (a,f,g,c,d,e亮，6多g)
  43            0x76, // H (17): 01110110 (f,g,b,c,e亮)
  44            0x06, // I (18): 00000110 (同1)
  45            0x1E, // J (19): 00011110 (b,c,d,e亮)
  46            0x75, // K (20): 01110101 (f,g,b,c,e亮，类似H但e段不同)
  47            0x38, // L (21): 00111000 (f,e,d亮)
  48            0x15, // M (22): 00010101 (a,b,c,f,e亮，自定义简化版)
  49            0x54, // N (23): 01010100 (a,b,c,f,g亮，简化版)
  50            0x5C, // O (24): 01011100 (a,b,c,d,e亮，类似0少g)
  51            0x73, // P (25): 01110011 (a,b,f,g,e亮)
  52            0x6B, // Q (26): 01100111 (a,b,c,d,f,g亮，9多e)
  53            0x50, // R (27): 01010000 (a,b,f,g亮，简化版)
  54            0x6D, // S (28): 01101101 (同5)
C51 COMPILER V9.51   MAIN                                                                  09/17/2025 16:47:21 PAGE 2   

  55            0x78, // T (29): 01111000 (f,g,e亮)
  56            0x3E, // U (30): 00111110 (b,c,d,e,f亮，类似0少a)
  57            0x1C, // V (31): 00011100 (b,c,d,e亮，简化版)
  58            0x2A, // W (32): 00101010 (自定义简化版，显示为双V)
  59            0x76, // X (33): 01110110 (同H)
  60            0x6E, // Y (34): 01101110 (b,c,d,f,g亮)
  61            0x5B, // Z (35): 01011011 (同2)
  62          
  63            // 小写字母（常用）
  64            0x5F, // a (36): 01011111 (类似9少b)
  65            0x7C, // b (37): 01111100 (同大写B)
  66            0x58, // c (38): 01011000 (f,e,d,g亮)
  67            0x5E, // d (39): 01011110 (同大写D)
  68            0x7B, // e (40): 01111011 (a,f,g,e,d亮，E多g)
  69            0x71, // f (41): 01110001 (同大写F)
  70          
  71            // 符号
  72            0x40, // - (42): 01000000 (g亮)
  73            0x80, // . (43): 10000000 (小数点亮)
  74            0x00, // 空格 (44): 00000000 (全灭)
  75            0x63  // = (45): 01100011 (g和d段亮)
  76          };
  77          #endif
  78          
  79          #define RECEIVE_LEN 5
  80          int count = 0;
  81          // LED控制
  82          int LEDmode = 1;
  83          int LEDchange = 1;
  84          unsigned char led_val = 0x02;
  85          int led_flow_reverse = 1;
  86          // 串口控制
  87          char data_recieved[RECEIVE_LEN];
  88          char matched_data[] = {0xaa, 0x55};
  89          char uart_data[3];
  90          void myUart2_callback()
  91          {
  92   1        char flag = data_recieved[2];
  93   1        char menu_select = data_recieved[3];
  94   1      
  95   1        if (flag == 0x01 || flag == 0x02)
  96   1          LEDmode = 2;
  97   1        else
  98   1          LEDmode = 1;
  99   1      }
 100          void myDisplay_callback()
 101          {
 102   1        char flag = data_recieved[2];
 103   1        char menu_select = data_recieved[3];
 104   1        if (flag == 0x00)
 105   1        {
 106   2          if (menu_select == 0x00)
 107   2            Seg7Print(23, 10, 30, 29, 18, 21, 30, 28);
 108   2          else if (menu_select == 0x01)
 109   2            Seg7Print(42, 13, 40, 29, 40, 38, 29, 42);
 110   2          else if (menu_select == 0x02)
 111   2            Seg7Print(42, 11, 27, 24, 32, 28, 40, 42);
 112   2          else if (menu_select == 0x03)
 113   2            Seg7Print(28, 17, 40, 18, 20, 36, 17, 42);
 114   2          else if (menu_select == 0x04)
 115   2            Seg7Print(42, 14, 36, 27, 29, 17, 42, 42);
 116   2        }
C51 COMPILER V9.51   MAIN                                                                  09/17/2025 16:47:21 PAGE 3   

 117   1        else if (flag == 0x01)
 118   1          Seg7Print(23, 10, 30, 29, 18, 21, 30, 28);
 119   1      }
 120          void myKey_callback()
 121          {
 122   1        char k = GetKeyAct(enumKey1);
 123   1        if (k == enumKeyPress)
 124   1      
 125   1          count++;
 126   1      }
 127          void myLED_callback()
 128          {
 129   1        // 初始界面
 130   1        if (LEDmode == 1 && LEDchange == 1)
 131   1        {
 132   2          LedPrint(0x55);
 133   2        }
 134   1        else if (LEDmode == 1 && LEDchange == -1)
 135   1        {
 136   2          LedPrint(0xaa);
 137   2        }
 138   1        else if (LEDmode == 2)
 139   1        {
 140   2          LedPrint(led_val);
 141   2        }
 142   1        LEDchange *= -1;
 143   1      
 144   1        // 流水灯
 145   1        if (led_val < 0x80 && led_flow_reverse == 1)
 146   1        {
 147   2          led_val = led_val << 1;
 148   2        }
 149   1        else if (led_val > 0x01 && led_flow_reverse == -1)
 150   1        {
 151   2          led_val = led_val >> 1;
 152   2        }
 153   1        else if (led_val == 0x80 || led_val == 0x01)
 154   1        {
 155   2          led_flow_reverse *= -1;
 156   2        }
 157   1      }
 158          void myVib_callback()
 159          {
 160   1        char k = GetVibAct();
 161   1        if (k == enumVibQuake)
 162   1        {
 163   2          uart_data[0]=0xaa;
 164   2          uart_data[1]=0x55;
 165   2          uart_data[2]=0x01;
 166   2          Uart2Print(uart_data, 3);
 167   2        }
 168   1      }
 169          void main()
 170          {
 171   1        Uart2Init(115200, Uart2UsedforEXT);
 172   1        displayerInit();
*** WARNING C206 IN LINE 172 OF main.c: 'displayerInit': missing function-prototype
 173   1        keyInit();
*** WARNING C206 IN LINE 173 OF main.c: 'keyInit': missing function-prototype
 174   1        VibInit();
 175   1        SetDisplayerArea(0, 7);
 176   1      
C51 COMPILER V9.51   MAIN                                                                  09/17/2025 16:47:21 PAGE 4   

 177   1        SetUart2Rxd(data_recieved, RECEIVE_LEN, matched_data, 2);
 178   1      
 179   1        SetEventCallBack(enumEventVib, myVib_callback);
 180   1        SetEventCallBack(enumEventKey, myKey_callback);
 181   1        SetEventCallBack(enumEventUart2Rxd, myUart2_callback);
 182   1        SetEventCallBack(enumEventSys1S, myDisplay_callback);
 183   1        SetEventCallBack(enumEventSys100mS, myLED_callback);
 184   1      
 185   1        MySTC_Init();
 186   1        while (1)
 187   1        {
 188   2          MySTC_OS();
 189   2        }
 190   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    490    ----
   CONSTANT SIZE    =     50    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     19       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
